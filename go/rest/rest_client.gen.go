// Package rest provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package rest

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	ApiKeyScopes = "apiKey.Scopes"
)

// Defines values for AudioEncoding.
const (
	AudioEncodingClosed    AudioEncoding = "closed"
	AudioEncodingCompleted AudioEncoding = "completed"
	AudioEncodingFailed    AudioEncoding = "failed"
	AudioEncodingOpen      AudioEncoding = "open"
)

// Defines values for Order.
const (
	Asc  Order = "asc"
	Desc Order = "desc"
)

// Defines values for StreamAsrJobStatus.
const (
	StreamAsrJobStatusClosed    StreamAsrJobStatus = "closed"
	StreamAsrJobStatusCompleted StreamAsrJobStatus = "completed"
	StreamAsrJobStatusFailed    StreamAsrJobStatus = "failed"
	StreamAsrJobStatusOpen      StreamAsrJobStatus = "open"
)

// AudioEncoding defines model for audio_encoding.
type AudioEncoding string

// Blank defines model for blank.
type Blank = map[string]interface{}

// Conversation defines model for conversation.
type Conversation struct {
	EndedAt        *time.Time         `json:"ended_at"`
	Id             openapi_types.UUID `json:"id"`
	OrganizationId openapi_types.UUID `json:"organization_id"`
	StartedAt      time.Time          `json:"started_at"`
	Title          string             `json:"title"`
}

// ConversationDetail defines model for conversation_detail.
type ConversationDetail struct {
	EndedAt        *time.Time         `json:"ended_at"`
	Id             openapi_types.UUID `json:"id"`
	OrganizationId openapi_types.UUID `json:"organization_id"`
	Participants   []Participant      `json:"participants"`
	StartedAt      time.Time          `json:"started_at"`
	Title          string             `json:"title"`
	Utterances     []Utterance        `json:"utterances"`
}

// Order defines model for order.
type Order string

// Participant defines model for participant.
type Participant struct {
	Id   openapi_types.UUID `json:"id"`
	Name string             `json:"name"`
}

// StreamAsrJob defines model for stream_asr_job.
type StreamAsrJob struct {
	ApiKeyId                openapi_types.UUID  `json:"api_key_id"`
	AudioEncoding           AudioEncoding       `json:"audio_encoding"`
	AudioSampleRate         int                 `json:"audio_sample_rate"`
	ClosedAt                *time.Time          `json:"closed_at"`
	CompletedAt             *time.Time          `json:"completed_at"`
	ConversationId          *openapi_types.UUID `json:"conversation_id,omitempty"`
	CreatedAt               time.Time           `json:"created_at"`
	CumulativeAudioDuration int                 `json:"cumulative_audio_duration"`
	CumulativeVoiceDuration int                 `json:"cumulative_voice_duration"`
	FailedAt                *time.Time          `json:"failed_at"`
	Id                      openapi_types.UUID  `json:"id"`
	IsDataLoggingEnabled    bool                `json:"is_data_logging_enabled"`
	OrganizationId          openapi_types.UUID  `json:"organization_id"`
	Status                  StreamAsrJobStatus  `json:"status"`
}

// StreamAsrJobStatus defines model for stream_asr_job_status.
type StreamAsrJobStatus string

// Utterance defines model for utterance.
type Utterance struct {
	EndAt         time.Time          `json:"end_at"`
	Id            openapi_types.UUID `json:"id"`
	ParticipantId openapi_types.UUID `json:"participant_id"`
	StartAt       time.Time          `json:"start_at"`
	Text          string             `json:"text"`
}

// GetConversationsParams defines parameters for GetConversations.
type GetConversationsParams struct {
	MinStartedAt *time.Time `form:"min_started_at,omitempty" json:"min_started_at,omitempty"`
	MaxStartedAt *time.Time `form:"max_started_at,omitempty" json:"max_started_at,omitempty"`
	Limit        int        `form:"limit" json:"limit"`
	Offset       int        `form:"offset" json:"offset"`
	Order        Order      `form:"order" json:"order"`
}

// GetStreamAsrJobsParams defines parameters for GetStreamAsrJobs.
type GetStreamAsrJobsParams struct {
	MinCreatedAt *time.Time `form:"min_created_at,omitempty" json:"min_created_at,omitempty"`
	MaxCreatedAt *time.Time `form:"max_created_at,omitempty" json:"max_created_at,omitempty"`
	Limit        int        `form:"limit" json:"limit"`
	Offset       int        `form:"offset" json:"offset"`
	Order        Order      `form:"order" json:"order"`
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetConversations request
	GetConversations(ctx context.Context, params *GetConversationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConversationDetail request
	GetConversationDetail(ctx context.Context, conversationId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHealth request
	GetHealth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStreamAsrJobs request
	GetStreamAsrJobs(ctx context.Context, params *GetStreamAsrJobsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStreamAsrJob request
	GetStreamAsrJob(ctx context.Context, streamAsrJobId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetConversations(ctx context.Context, params *GetConversationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConversationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConversationDetail(ctx context.Context, conversationId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConversationDetailRequest(c.Server, conversationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHealth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHealthRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStreamAsrJobs(ctx context.Context, params *GetStreamAsrJobsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStreamAsrJobsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStreamAsrJob(ctx context.Context, streamAsrJobId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStreamAsrJobRequest(c.Server, streamAsrJobId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetConversationsRequest generates requests for GetConversations
func NewGetConversationsRequest(server string, params *GetConversationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/conversations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.MinStartedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "min_started_at", runtime.ParamLocationQuery, *params.MinStartedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MaxStartedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max_started_at", runtime.ParamLocationQuery, *params.MaxStartedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, params.Order); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetConversationDetailRequest generates requests for GetConversationDetail
func NewGetConversationDetailRequest(server string, conversationId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "conversation_id", runtime.ParamLocationPath, conversationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/conversations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHealthRequest generates requests for GetHealth
func NewGetHealthRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/health")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStreamAsrJobsRequest generates requests for GetStreamAsrJobs
func NewGetStreamAsrJobsRequest(server string, params *GetStreamAsrJobsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/stream_asr_jobs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.MinCreatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "min_created_at", runtime.ParamLocationQuery, *params.MinCreatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MaxCreatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max_created_at", runtime.ParamLocationQuery, *params.MaxCreatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, params.Order); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStreamAsrJobRequest generates requests for GetStreamAsrJob
func NewGetStreamAsrJobRequest(server string, streamAsrJobId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "stream_asr_job_id", runtime.ParamLocationPath, streamAsrJobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/stream_asr_jobs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetConversationsWithResponse request
	GetConversationsWithResponse(ctx context.Context, params *GetConversationsParams, reqEditors ...RequestEditorFn) (*GetConversationsResponse, error)

	// GetConversationDetailWithResponse request
	GetConversationDetailWithResponse(ctx context.Context, conversationId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetConversationDetailResponse, error)

	// GetHealthWithResponse request
	GetHealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHealthResponse, error)

	// GetStreamAsrJobsWithResponse request
	GetStreamAsrJobsWithResponse(ctx context.Context, params *GetStreamAsrJobsParams, reqEditors ...RequestEditorFn) (*GetStreamAsrJobsResponse, error)

	// GetStreamAsrJobWithResponse request
	GetStreamAsrJobWithResponse(ctx context.Context, streamAsrJobId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetStreamAsrJobResponse, error)
}

type GetConversationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Conversation
}

// Status returns HTTPResponse.Status
func (r GetConversationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConversationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConversationDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConversationDetail
}

// Status returns HTTPResponse.Status
func (r GetConversationDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConversationDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHealthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Blank
}

// Status returns HTTPResponse.Status
func (r GetHealthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHealthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStreamAsrJobsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]StreamAsrJob
}

// Status returns HTTPResponse.Status
func (r GetStreamAsrJobsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStreamAsrJobsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStreamAsrJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StreamAsrJob
}

// Status returns HTTPResponse.Status
func (r GetStreamAsrJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStreamAsrJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetConversationsWithResponse request returning *GetConversationsResponse
func (c *ClientWithResponses) GetConversationsWithResponse(ctx context.Context, params *GetConversationsParams, reqEditors ...RequestEditorFn) (*GetConversationsResponse, error) {
	rsp, err := c.GetConversations(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConversationsResponse(rsp)
}

// GetConversationDetailWithResponse request returning *GetConversationDetailResponse
func (c *ClientWithResponses) GetConversationDetailWithResponse(ctx context.Context, conversationId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetConversationDetailResponse, error) {
	rsp, err := c.GetConversationDetail(ctx, conversationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConversationDetailResponse(rsp)
}

// GetHealthWithResponse request returning *GetHealthResponse
func (c *ClientWithResponses) GetHealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHealthResponse, error) {
	rsp, err := c.GetHealth(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHealthResponse(rsp)
}

// GetStreamAsrJobsWithResponse request returning *GetStreamAsrJobsResponse
func (c *ClientWithResponses) GetStreamAsrJobsWithResponse(ctx context.Context, params *GetStreamAsrJobsParams, reqEditors ...RequestEditorFn) (*GetStreamAsrJobsResponse, error) {
	rsp, err := c.GetStreamAsrJobs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStreamAsrJobsResponse(rsp)
}

// GetStreamAsrJobWithResponse request returning *GetStreamAsrJobResponse
func (c *ClientWithResponses) GetStreamAsrJobWithResponse(ctx context.Context, streamAsrJobId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetStreamAsrJobResponse, error) {
	rsp, err := c.GetStreamAsrJob(ctx, streamAsrJobId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStreamAsrJobResponse(rsp)
}

// ParseGetConversationsResponse parses an HTTP response from a GetConversationsWithResponse call
func ParseGetConversationsResponse(rsp *http.Response) (*GetConversationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConversationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Conversation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetConversationDetailResponse parses an HTTP response from a GetConversationDetailWithResponse call
func ParseGetConversationDetailResponse(rsp *http.Response) (*GetConversationDetailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConversationDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConversationDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetHealthResponse parses an HTTP response from a GetHealthWithResponse call
func ParseGetHealthResponse(rsp *http.Response) (*GetHealthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHealthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Blank
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetStreamAsrJobsResponse parses an HTTP response from a GetStreamAsrJobsWithResponse call
func ParseGetStreamAsrJobsResponse(rsp *http.Response) (*GetStreamAsrJobsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStreamAsrJobsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []StreamAsrJob
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetStreamAsrJobResponse parses an HTTP response from a GetStreamAsrJobWithResponse call
func ParseGetStreamAsrJobResponse(rsp *http.Response) (*GetStreamAsrJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStreamAsrJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StreamAsrJob
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
